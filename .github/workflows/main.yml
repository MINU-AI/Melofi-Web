name: Melofi web deployment

on:
  pull_request:
    types:
      - closed
    branches: [master]

env:
  ECR_REPOSITORY: melofi-web
  AWS_REGION: ap-southeast-1
  CONTAINER_NAME: melofi-web
  ENV_FILE: /home/thien/workspace/melofi-web-dev/.env
  AWS_US1_ECR_SERVER: 398287634444.dkr.ecr.ap-southeast-1.amazonaws.com

jobs:
  pull-code-and-build-container:
    runs-on: melofi-web-dev
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_ACCESS_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-on-remote-host:
    runs-on: melofi-web-dev
    needs: pull-code-and-build-container
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_ACCESS_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy container on remote host
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          # Pull the latest image
          docker pull $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ github.run_number }}

          # Stop and remove the old container, run the new container
          docker rm -f ${{env.CONTAINER_NAME}} && docker run -d --name ${{env.CONTAINER_NAME}} -p 6008:3000 --restart unless-stopped -v ${{env.ENV_FILE}}:/opt/app/.env $ECR_REGISTRY/${{ env.ECR_REPOSITORY}}:${{ github.run_number }}
